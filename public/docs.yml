openapi: '3.0.2'
info:
  title: GoFitLife RESTful API
  description: OpenAPI for GoFitLife RESTful API
  version: '1.0'
  contact:
    name: Julkarnain
    email: julkarnainlbs29@gmail.com
  license:
    name: APACHE 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
servers:
  - description: Production
    url: https://prw8fl-5000.csb.app/api
  - description: Development
    url: http://localhost:5000/api
tags:
  - name: Auth
  - name: Profile
  - name: Admin
  - name: Plan
  - name: Food
  - name: Recipe
  - name: Activity
  - name: News
  - name: Image
paths:
  /plan:
    get:
      tags:
        - Plan
      summary: Get all plans
      security:
        - userAuth: []
      parameters:
        - in: query
          name: date
          description: Plan date
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
  
  /plan/meals:
    post:
      tags:
        - Plan
      summary: Add meal plan
      security:
        - userAuth: []
      parameters:
        - in: query
          name: date
          description: Meal plan date
          required: true
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - category
                - type
                - ammount
              properties:
                id:
                  type: integer
                  minimum: 1
                  description: id food/recipe
                category:
                  type: string
                  enum:
                    - breakfast
                    - lunch
                    - dinner
                    - snack
                type:
                  type: string
                  enum:
                    - recipe
                    - food
                ammount:
                  type: integer
                  minimum: 1
                  description: serving/gram
                note:
                  type: string
      
      responses:
        '200':
          description: OK
  
  /plan/meals/{plan_id}:
    put:
      tags:
        - Plan
      summary: Edit meal plan by id
      security:
        - userAuth: []
      parameters:
        - in: path
          name: plan_id
          description: Plan id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - category
                - type
                - ammount
              properties:
                id:
                  type: integer
                  minimum: 1
                  description: id food/recipe
                category:
                  type: string
                  enum:
                    - breakfast
                    - lunch
                    - dinner
                    - snack
                type:
                  type: string
                  enum:
                    - recipe
                    - food
                ammount:
                  type: integer
                  minimum: 1
                  description: serving (recipe) / gram (food)
                note:
                  type: string
      
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Plan
      summary: Delete meal plan by id
      security:
        - userAuth: []
      parameters:
        - in: path
          name: plan_id
          description: Plan id
          required: true
          schema:
            type: integer
          
      responses:
        '200':
          description: OK
  
  /plan/activities:
    post:
      tags:
        - Plan
      summary: Add activity plan
      security:
        - userAuth: []
      parameters:
        - in: query
          name: date
          description: Activity plan date
          required: true
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - duration
                - time
                - note
              properties:
                id:
                  type: integer
                  minimum: 1
                  description: id activity
                duration:
                  type: integer
                  minimum: 1
                  description: duration in minute
                time:
                  type: string
                  format: time
                  default: '14:30'
                note:
                  type: string
          
      responses:
        '200':
          description: OK
  
  /plan/activities/{plan_id}:
    put:
      tags:
        - Plan
      summary: Edit activity plan by id
      security:
        - userAuth: []
      parameters:
        - in: path
          name: plan_id
          description: Plan id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - duration
                - time
                - note
              properties:
                id:
                  type: integer
                  minimum: 1
                  description: id activity
                duration:
                  type: integer
                  minimum: 1
                  description: duration in minute
                time:
                  type: string
                  format: time
                  default: '14:30'
                note:
                  type: string
          
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Plan
      summary: Delete activity plan by id
      security:
        - userAuth: []
      parameters:
        - in: path
          name: plan_id
          description: Plan id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  
  /plan/drink:
    put:
      tags:
        - Plan
      summary: Change drink glass
      security:
        - userAuth: []
      parameters:
        - in: query
          name: date
          description: Drink plan date
          required: true
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - glass
              properties:
                glass:
                  type: integer
                  minimum: 1
                  description: glass number
          
      responses:
        '200':
          description: OK
  
  /users:
    get:
      tags:
        - Admin
      summary: Get all users
      security:
        - userAuth: []
      responses:
        '200':
          description: succes login
          content:
            application/json:
              schema:
                type: object
  /users/{user_id}:
    delete:
      tags:
        - Admin
      summary: Delete user by id
      security:
        - userAuth: []
      parameters:
        - in: path
          name: user_id
          description: User id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: succes login
          content:
            application/json:
              schema:
                type: object
  
  /recipes:
    get:
      tags:
        - Recipe
      summary: Get all recipes
      parameters:
        - in: query
          name: name
          description: Search recipe by keyword
          required: false
          schema:
            type: string
        - in: query
          name: category
          description: Filter recipe by category
          required: false
          schema:
            type: string
            enum:
              - breakfast
              - lunch
              - dinner
              - snack
        - in: query
          name: recomended
          description: Get recomended recipe (must login)
          required: false
          schema:
            type: boolean
        - in: query
          name: page
          description: Page index
          required: false
          schema:
            type: number
        - in: query
          name: pageSize
          description: Page size limit
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
    post:
      tags:
        - Admin
      summary: Add new recipe
      security:
        - userAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - photo
                - category
                - description
                - duration
                - serving
                - energy
                - protein
                - fat
                - carbs
                - ingredients
                - directions
              properties:
                name:
                  type: string
                  default: Food Name
                photo:
                  type: string
                  format: binary
                category:
                  type: string
                  enum:
                    - breakfast
                    - lunch
                    - dinner
                    - snack
                description:
                  type: string
                  maxLength: 255
                duration:
                  type: integer
                serving:
                  type: integer
                energy:
                  type: integer
                protein:
                  type: number
                fat:
                  type: number
                carbs: 
                  type: number
                ingredients:
                  type: string
                  default: [{"name": "sauce", "unit": "2 tsp"}]
                directions:
                  type: string
                  default: [{"detail": "Mix the dry ingredients together."}]
      
      responses:
        '200':
          description: OK
  /recipes/{recipe_id}:
    get:
      tags:
        - Recipe
      summary: Get recipe details by id
      parameters:
        - in: path
          name: recipe_id
          description: Recipe id
          required: true
          schema:
            type: integer
       
      responses:
        '200':
          description: OK
  
    put:
      tags:
        - Admin
      summary: Edit recipe by id
      security:
        - userAuth: []
      parameters:
        - in: path
          name: recipe_id
          description: Recipe id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - category
                - description
                - duration
                - serving
                - energy
                - protein
                - fat
                - carbs
                - ingredients
                - directions
              properties:
                name:
                  type: string
                  default: Food Name
                photo:
                  type: string
                  format: binary
                category:
                  type: string
                  enum:
                    - breakfast
                    - lunch
                    - dinner
                    - snack
                description:
                  type: string
                  maxLength: 255
                duration:
                  type: integer
                serving:
                  type: integer
                energy:
                  type: integer
                protein:
                  type: number
                fat:
                  type: number
                carbs: 
                  type: number
                ingredients:
                  type: string
                  default: [{"name": "sauce", "unit": "2 tsp"}]
                directions:
                  type: string
                  default: [{"detail": "Mix the dry ingredients together."}]
      
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Admin
      summary: Delete recipe by id
      security:
        - userAuth: []
      parameters:
        - in: path
          name: recipe_id
          description: Recipe id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  
  /activities:
    get:
      tags:
        - Activity
      summary: Get all activities data
      parameters:
        - in: query
          name: name
          description: Seacrh activities
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: Page index
          required: false
          schema:
            type: number
        - in: query
          name: pageSize
          description: Page size limit
          required: false
          schema:
            type: number
      
      responses:
        '200':
          description: succes login
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Admin
      summary: Add activity data
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - met
              properties:
                name:
                  type: string
                  example: Berlari
                met:
                  type: number
                  example: 7
      responses:
        '200':
          description: succes login
          content:
            application/json:
              schema:
                type: object
  /activities/{activity_id}:
    put:
      tags:
        - Admin
      summary: Edit activity data
      security:
        - userAuth: []
      parameters:
        - in: path
          required: true
          name: activity_id
          schema:
            type: number
      
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - met
              properties:
                name:
                  type: string
                  example: Berlari
                met:
                  type: number
                  example: 7
      responses:
        '200':
          description: succes login
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
        - Admin
      summary: Delete activity data
      security:
        - userAuth: []
      parameters:
        - in: path
          required: true
          name: activity_id
          schema:
            type: number
      responses:
        '200':
          description: succes login
          content:
            application/json:
              schema:
                type: object
  
  /foods:
    get:
      tags:
        - Food
      summary: Get all foods nutrient per 100 gr
      parameters:
        - in: query
          name: name
          description: All food with contain name
          required: false
          schema:
            type: string
        - in: query
          name: category
          description: Filter food by category
          required: false
          schema:
            type: string
            enum:
              - 'beverage' 
              - 'cereal'
              - 'egg' 
              - 'fat'
              - 'fruit'
              - 'grain'
              - 'meat'
              - 'milk'
              - 'pastry'
              - 'seafood'
              - 'spice'
              - 'tuber'
              - 'vegetable'
          
        - in: query
          name: type
          description: Filter food by type
          required: false
          schema:
            type: string
            enum:
              - processed
              - raw
        - in: query
          name: page
          description: Page index
          required: false
          schema:
            type: number
        - in: query
          name: pageSize
          description: Page size limit
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
    post:
      tags:
        - Admin
      summary: Add food data
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - category
                - type
                - energy
                - protein
                - fat
                - carbs
              properties:
                name:
                  type: string
                category:
                  type: string
                  enum:
                    - 'beverage' 
                    - 'cereal'
                    - 'egg' 
                    - 'fat'
                    - 'fruit'
                    - 'grain'
                    - 'meat'
                    - 'milk'
                    - 'pastry'
                    - 'seafood'
                    - 'spice'
                    - 'tuber'
                    - 'vegetable'
                type:
                  type: string
                  enum:
                   - processed
                   - raw
                energy:
                  type: integer
                protein:
                  type: number
                fat:
                  type: number
                carbs:
                  type: number
      
      responses:
        '200':
          description: OK
  /foods/{food_id}:
    put:
      tags:
        - Admin
      summary: Edit food data by id
      security:
        - userAuth: []
      parameters:
        - in: path
          name: food_id
          description: Food id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - category
                - type
                - energy
                - protein
                - fat
                - carbs
              properties:
                name:
                  type: string
                category:
                  type: string
                  enum:
                    - 'beverage' 
                    - 'cereal'
                    - 'egg' 
                    - 'fat'
                    - 'fruit'
                    - 'grain'
                    - 'meat'
                    - 'milk'
                    - 'pastry'
                    - 'seafood'
                    - 'spice'
                    - 'tuber'
                    - 'vegetable'
                type:
                  type: string
                  enum:
                   - processed
                   - raw
                energy:
                  type: integer
                protein:
                  type: number
                fat:
                  type: number
                carbs:
                  type: number
      
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Admin
      summary: Delete food data by id
      security:
        - userAuth: []
      parameters:
        - in: path
          name: food_id
          description: Food id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  
  
  /profile:
    get:
      tags:
        - Profile
      summary: Get user information
      security:
        - userAuth: []
      responses:
        '200':
          description: Get profile success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        format: email
                        example: john.doe@example.com
                      photo:
                        type: string
                        format: uuid
                        example: eb04680d-a03d-4c6a-88fc-89d6fa6ac5ae
                      birthday:
                        type: string
                        format: date-time
                        example: "2001-12-02T00:00:00.000Z"
                      gender:
                        type: string
                        enum:
                          - male
                          - female
                        example: male
                      weight:
                        type: number
                        example: 65
                      height:
                        type: number
                        example: 173
                      activity_level:
                        type: number
                        example: 2
                      registered_at:
                        type: string
                        format: date-time
                        example: "2023-12-02T00:00:00.000Z"
                  message:
                    type: object
                    example: null
    post:
      tags:
        - Profile
      summary: Complete user information after register
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - gender
                - birthday
                - weight
                - height
                - activity_level
              properties:
                gender:
                  type: string
                  enum:
                    - male
                    - female
                  example: male
                birthday:
                  type: string
                  example: "2001-12-02T00:00:00.000Z"
                weight:
                  type: number
                  example: 65
                height:
                  type: number
                  example: 173
                activity_level:
                  type: number
                  example: 2
      responses:
        '200':
          description: succes login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      gender:
                        type: string
                        example: male
                      birthday:
                        type: string
                        example: "2001-12-02T00:00:00.000Z"
                      weight:
                        type: number
                        example: 65
                      height:
                        type: number
                        example: 173
                      activity_level:
                        type: number
                        example: 2
                  message:
                    type: string
                    example: profile created
    put:
      tags:
        - Profile
      summary: Edit user information
      security:
        - userAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: John Doe
                gender:
                  type: string
                  enum:
                    - male
                    - female
                  default: male
                birthday:
                  type: string
                  format: date-time
                  default: '2001-12-02T00:00:00.000Z'
                weight:
                  type: number
                  default: 73
                height:
                  type: number
                  default: 180
                activity_level:
                  type: integer
                  minimum: 1
                  maximum: 5
                  default: 1
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: success update profile
          content:
            application/json:
              schema:
                type: object
  
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login account to get token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  minLength: 8
                  maxLength: 15
                  example: password
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data: 
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                  message:
                    type: string
                    example: login success
  /auth/register:
    post:
      tags:
        - Auth
      summary: Create new account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  minLength: 8
                  maxLength: 15
                  example: password
      responses:
        '200':
          description: Register success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data: 
                    type: object
                    example: null
                  message:
                    type: string
                    example: register success
  
  /auth/change-password:
    post:
      tags:
        - Auth
      summary: Change password
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - old_password
                - new_password
              properties:
                old_password:
                  type: string
                  minLength: 8
                  maxLength: 15
                  example: oldpassword
                new_password:
                  type: string
                  minLength: 8
                  maxLength: 15
                  example: newpassword
      responses:
        '200':
          description: Change password success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data: 
                    type: object
                    example: null
                  message:
                    type: string
                    example: change password success
  /news:
    get:
      tags:
        - News
      summary: Get news list
      parameters:
        - in: query
          name: title
          description: Search news by keyword
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: Page index
          required: false
          schema:
            type: number
        - in: query
          name: pageSize
          description: Page size limit
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
  
  /images/{image_id}:
    get:
      tags:
        - Image
      summary: Get image by id
      parameters:
        - in: path
          name: image_id
          description: Image id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK

components:
  # schemas:
    # RecipeIngredient:
      # type: object
      # properties:
      #   name:
      #     type: string
      #   unit: 
      #     type: string
  securitySchemes:
    userAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
